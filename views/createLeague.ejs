<!-- views/createLeague.ejs -->
<!doctype html>
<html>
	<head>
		<title>Create New League</title>
		<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
		<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
		<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
		<style>
			body 		{ padding-top:80px; word-wrap:break-word; }
		</style>
	</head>
	<body>
		<div class="container">
			<header>
				<%- include ('navbar.ejs') %>
			</header>
			<div class="row">
				<!-- User Info -->
				<div class="col-sm-4 well" id="createNewLeagueContainer">
					<!-- show any messages -->
					<h3>Create a new League</h3>

					<div id="createLeagueForm">
						<select id="series" name="series" required>
							<option disabled selected value> -- Select Series -- </option>
							<% for(var i=0; i < series.length; i++) { %>
								<option value="<%= series[i]['SeriesID']%>"><%= series[i]['SeriesName']%></option>
							<% } %>
						</select><br>
						League Name: <input type="text" name="leagueName" id="leagueName"><br>
						Max. User Squads: <input type="number" name="maxUsers" id="maxUsers" placeholder="0" step="1" min="2" required><br>

						Players per Squad: <input type="number" name="numPlayers" id="numPlayers" placeholder="0" step="1" min="11" max="18" required><br>

						User Squad Budget: <input type="number" name="squadBudget" id="squadBudget" placeholder="1000" step="100" min="1000" max="10000" required><br>

						Min Bowlers: <input type="number" name="minBowler" id="minBowler" placeholder="1" step="1" min="1" required><br>

						Min WicketKeepers: <input type="number" name="minWicketKeep" id="minWicketKeep" placeholder="0" step="1" min="0" required><br>

						<button id="newLeagueFormSubmit">Submit</button>
					</div>
				</div>
				<div class="col-sm-4 well">
					<h2 class="text-center"> OR </h2>
				</div>
				<div id="joinLeagueContainer" class="col-sm-4 well">
					<h3>Join a League</h3>
					<div id="joinLeagueForm">
						Enter League Id: <input type="number" name="leagueId" id="leagueId" placeholder="0" step="1" min="1" required><br>
						<button id="joinLeagueFormSubmit">Join League</button>
					</div>
				</div>
			</div>
		</div>
		<script type="text/javascript">
			function validateNewLeagueForm(){
				var series = document.getElementById("series")
				var leagueName = document.getElementById("leagueName")
				var maxUsers = document.getElementById("maxUsers")
				var numPlayers = document.getElementById("numPlayers")
				var squadBudget = document.getElementById("squadBudget")
				var minBowler = document.getElementById("minBowler")
				var minWicketKeep = document.getElementById("minWicketKeep")
				errors = []
				if(series.value=="")errors.push("Please Select a Series");
				if(leagueName.value.trim().length<5 || leagueName.value.trim().length >30){
					leagueName.value = leagueName.value.trim()
					errors.push("League Name must be between 5 and 30 characters long")
				}
				if(maxUsers.value<2 || maxUsers.value>10 || !isNormalInteger(maxUsers.value))
					errors.push("Max Users must be an integer between 2 and 10")
				if(numPlayers.value<11 || numPlayers.value>18 || !isNormalInteger(numPlayers.value))
					errors.push("Players per Squad must be an integer between 11 and 18")
				if(squadBudget.value<1000 || squadBudget.value>10000 || (squadBudget.value%100)!=0 || !isNormalInteger(squadBudget.value))errors.push("Squad Budget must a multiple of 100 in the range 1000 to 10000")
				if(minBowler.value<1 || minBowler.value>4 || !isNormalInteger(minBowler.value))
					errors.push("Min Bowlers must be an integer between 1 and 4")
				if(minWicketKeep.value>2 || !isNormalInteger(minWicketKeep.value))
					errors.push("Min WicketKeepers must be an integer between 0 and 2")
				if(errors.length==0)return true;
				alert(errors.join('\n'))
				return false
			}

			function validateJoinLeagueForm(){
				leagueId = document.getElementById('leagueId')
				if(isNormalInteger(leagueId.value) && leagueId.value>0)return true
				alert("League Id must be a postive integer")
				return false
			}

			function isNormalInteger(str){
				var n = Math.floor(Number(str));
				return n !== Infinity && String(n) === str && n >= 0;
			}

			document.getElementById("newLeagueFormSubmit").addEventListener("click", function(event){
				event.preventDefault();
				if(!validateNewLeagueForm())return;
				var formData = createFormDataObject();
				postRequest('/createLeague', formData, function(error, response){
					if(error)return alert(error);
					var createNewLeagueContainer = document.getElementById("createNewLeagueContainer");
					displayRequestResult(response.data, createNewLeagueContainer);
				})
			});

			document.getElementById("joinLeagueFormSubmit").addEventListener("click", function(event){
				if(!validateJoinLeagueForm())return;
				var reqObj = {"leagueId": document.getElementById('leagueId').value};
				postRequest('/joinLeague', reqObj, function(error, response){
					if(error)alert(error);
					var joinLeagueContainer = document.getElementById("joinLeagueContainer");
					displayRequestResult(response.data, joinLeagueContainer);
				})
			})

			function createFormDataObject(){
				var series = document.getElementById("series").value;
				var leagueName = document.getElementById("leagueName").value;
				var maxUsers = document.getElementById("maxUsers").value;
				var numPlayers = document.getElementById("numPlayers").value;
				var squadBudget = document.getElementById("squadBudget").value;
				var minBowler = document.getElementById("minBowler").value;
				var minWicketKeep = document.getElementById("minWicketKeep").value;
				var ret = {
					"series": series,
					"leagueName": leagueName,
					"maxUsers": maxUsers,
					"numPlayers": numPlayers,
					"squadBudget": squadBudget,
					"minBowler": minBowler,
					"minWicketKeep": minWicketKeep
				}
				return ret;
			}

			function getRequest(path, callback){
				axios.get(path)
				.then((response)=>{
					callback(null, response)
				})
				.catch((error)=>{
					callback(error, null)
				})
			}

			function postRequest(path, data, callback){
				axios.post(path, data)
				.then((response)=>{
					callback(null, response)
				})
				.catch((error)=>{
					callback(error, null)
				})
			}

			function displayRequestResult(response, parentElement){
				var requestResultDisplay = document.createElement("div");
				if(response.hasOwnProperty("error")){
					requestResultDisplay.style.color = 'red';
					requestResultDisplay.innerText = response['error'];
				}
				else{
					requestResultDisplay.style.color = 'green';
					requestResultDisplay.innerText = response['success'];
				}
				parentElement.insertBefore(requestResultDisplay, parentElement.firstChild);
			}
		</script>
	</body>
</html>